# Project Requirements Document (PRD)

**Project Name**: {Your Application Name}
**Version**: 1.0
**Last Updated**: {YYYY-MM-DD}
**Document Owner**: {Your Name/Team}

---

## Instructions

This is an **example template** for your PROJECT.md or PRD.md file.

**How to use**:
1. Copy this file to `PROJECT.md` (or `PRD.md`)
2. Remove `.example` extension
3. Fill in all sections with your actual project details
4. Use Claude Code to help generate sections if needed

**Purpose**:
- Complete, detailed project documentation
- Source of truth for all requirements
- Input for generating `business-rules.md` (compressed version)

---

## Table of Contents

1. [Product Overview](#1-product-overview)
2. [Users and Roles](#2-users-and-roles)
3. [Features](#3-features)
4. [Data Models](#4-data-models)
5. [Business Rules](#5-business-rules)
6. [Technical Requirements](#6-technical-requirements)
7. [Success Metrics](#7-success-metrics)

---

## 1. Product Overview

### 1.1 Vision

{1-2 paragraphs describing what the application is and what problem it solves}

**Example**:
> A comprehensive project management system for small teams that streamlines task assignment, tracking, and collaboration. The platform enables teams to organize work efficiently without the complexity of enterprise solutions.

---

### 1.2 Problem Statement

{What problems does this solve? Who has these problems?}

**Example**:
> Small teams (5-20 people) struggle with:
> - Scattered task information across emails, chats, and spreadsheets
> - Lack of visibility into project progress
> - Difficulty prioritizing work
> - Manual status updates consuming team time

---

### 1.3 Target Users

{Who will use this application?}

**Example**:
> - **Team Leads**: Managers who assign tasks and track progress
> - **Team Members**: Individual contributors who execute tasks
> - **Stakeholders**: Executives who need progress visibility

---

### 1.4 Key Differentiators

{What makes this unique or better than alternatives?}

**Example**:
> - Simple, intuitive interface (not overwhelming)
> - Real-time collaboration features
> - Integrated time tracking
> - Mobile-first design

---

## 2. Users and Roles

### 2.1 {Role Name 1} (e.g., Admin, Manager, Team Lead)

**Description**: {Who they are}

**Capabilities**:
- {Capability 1}
- {Capability 2}
- {Capability 3}

**Restrictions**:
- Cannot {Restriction 1}
- Cannot {Restriction 2}

**Example Use Cases**:
1. {Use case 1}
2. {Use case 2}

---

### 2.2 {Role Name 2} (e.g., Team Member, Worker, User)

{Repeat structure from 2.1}

---

### 2.3 {Role Name 3} (if applicable)

{Repeat structure}

---

## 3. Features

### 3.1 {Feature Category 1} (e.g., Task Management)

#### 3.1.1 {Feature Name} (e.g., Create Task)

**Description**: {What this feature does}

**User Story**: As a {user type}, I want to {action} so that {benefit}

**Acceptance Criteria**:
- [ ] {Criterion 1}
- [ ] {Criterion 2}
- [ ] {Criterion 3}

**UI/UX Notes**:
- {Note about interface}
- {Note about user flow}

**Priority**: High | Medium | Low

---

#### 3.1.2 {Another Feature}

{Repeat structure}

---

### 3.2 {Feature Category 2} (e.g., Reporting)

{Repeat structure with features}

---

## 4. Data Models

### 4.1 {Entity Name 1} (e.g., Task, User, Project)

**Description**: {What this entity represents}

**Key Attributes**:
| Field | Type | Required | Description |
|-------|------|----------|-------------|
| id | UUID | Yes | Unique identifier |
| name | String | Yes | {Description} |
| status | Enum | Yes | {Possible values} |
| created_at | Timestamp | Yes | When created |
| updated_at | Timestamp | Yes | Last update |

**Relationships**:
- {Relationship to other entities}
- Example: "A Task belongs to one Project"
- Example: "A Task can have many Comments"

**Business Rules**:
- {Rule 1 about this entity}
- {Rule 2 about this entity}

---

### 4.2 {Entity Name 2}

{Repeat structure}

---

## 5. Business Rules

### 5.1 {Entity Name} Status Workflow

**Status Flow**:
```
draft → open → in_progress → review → completed
  ↓       ↓          ↓          ↓
cancelled cancelled cancelled cancelled
```

**Status Definitions**:
| Status | Description | Who Can Set | Rules |
|--------|-------------|-------------|-------|
| draft | Initial state | Creator | Can edit all fields |
| open | Ready for work | Manager | Team can claim |
| in_progress | Being worked on | Team Member | Must have assignee |
| review | Ready for review | Team Member | Requires completion criteria met |
| completed | Finished | Manager or Member | Cannot reopen |
| cancelled | Cancelled | Manager only | Can cancel from any state |

---

### 5.2 Validation Rules

#### {Entity Name} Validation

**Required Fields**:
- {field}: {validation rule}
- {field}: {validation rule}

**Format Rules**:
- {field}: {format requirement}
- Example: "email must be valid email format"
- Example: "phone must match pattern +1-XXX-XXX-XXXX"

**Business Constraints**:
- {constraint 1}
- Example: "Due date must be in the future"
- Example: "Task cannot be assigned to inactive user"

---

### 5.3 Permission Rules

**Who Can Do What**:

| Action | Admin | Manager | Team Member | Guest |
|--------|-------|---------|-------------|-------|
| Create task | ✅ | ✅ | ❌ | ❌ |
| Edit own task | ✅ | ✅ | ✅ | ❌ |
| Edit any task | ✅ | ✅ | ❌ | ❌ |
| Delete task | ✅ | ✅ | ❌ | ❌ |
| View all tasks | ✅ | ✅ | ✅ (assigned only) | ❌ |

---

### 5.4 Data Visibility Rules

**{Role} Can See**:
- {What data they can access}
- {What is hidden from them}

**Example**:
> **Team Members** can see:
> - Tasks assigned to them (full details)
> - Tasks in shared projects (limited: title, status, assignee only)
>
> **Team Members** cannot see:
> - Financial data (budgets, costs)
> - Admin notes
> - Other users' private tasks

---

## 6. Technical Requirements

### 6.1 Tech Stack

**Frontend**:
- Framework: {e.g., React 18}
- Language: {e.g., TypeScript 5}
- State: {e.g., React Query + Zustand}
- UI: {e.g., shadcn/ui + Tailwind}

**Backend**:
- {e.g., Supabase, Node.js, etc.}

**Database**:
- {e.g., PostgreSQL}

**Hosting**:
- {e.g., Vercel, AWS, etc.}

---

### 6.2 Performance Requirements

- Page load: < {X} seconds
- API response: < {X} ms
- Support {X} concurrent users
- Mobile-responsive (all screen sizes)

---

### 6.3 Security Requirements

- Authentication: {method, e.g., JWT, OAuth}
- Authorization: {method, e.g., RBAC, RLS}
- Data encryption: {in transit, at rest}
- Compliance: {if applicable, e.g., GDPR, HIPAA}

---

### 6.4 Accessibility Requirements

- WCAG {version} Level {AA/AAA} compliance
- Screen reader support
- Keyboard navigation
- Color contrast requirements

---

## 7. Success Metrics

### 7.1 Key Performance Indicators (KPIs)

**User Engagement**:
- Daily active users: {target}
- Task completion rate: {target}
- Average session duration: {target}

**Business Impact**:
- {Metric 1}: {target}
- {Metric 2}: {target}

**Technical**:
- Uptime: {target, e.g., 99.9%}
- Page load time: {target}
- Error rate: {target, e.g., < 1%}

---

### 7.2 Success Criteria

**MVP Success**:
- [ ] {Criterion 1}
- [ ] {Criterion 2}
- [ ] {Criterion 3}

**Long-term Success**:
- {Goal 1}
- {Goal 2}

---

## 8. Future Enhancements

**Phase 2** (post-MVP):
- {Enhancement 1}
- {Enhancement 2}

**Phase 3** (future):
- {Enhancement 1}
- {Enhancement 2}

---

## Notes

**Assumptions**:
- {Assumption 1}
- {Assumption 2}

**Dependencies**:
- {External dependency 1}
- {External dependency 2}

**Risks**:
- {Risk 1 and mitigation}
- {Risk 2 and mitigation}

---

## Change Log

| Date | Version | Changes | Author |
|------|---------|---------|--------|
| {YYYY-MM-DD} | 1.0 | Initial document | {Name} |
| {YYYY-MM-DD} | 1.1 | {Description} | {Name} |

---

## Approval

| Role | Name | Signature | Date |
|------|------|-----------|------|
| Product Owner | {Name} | | |
| Tech Lead | {Name} | | |
| Stakeholder | {Name} | | |